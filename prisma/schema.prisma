// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  likes       Like[]
  likeCount   Int      @default(0)
  bads        Bad[]

  @@index([title])
  @@index([createdAt])
}

model User {
  id              Int           @id @default(autoincrement())
  clerkId         String        @unique
  username        String?
  email           String        @unique
  avatarUrl       String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  posts           Post[]
  imageUrl        String?
  statusMessage   String?
  likes           Like[]
  bads            Bad[]
  followers       Follow[]      @relation("Followers")
  following       Follow[]      @relation("Following")
  notifications   Notification[]
  notificationsAsActor Notification[] @relation("NotificationActor")
}

model Like {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@unique([postId, userId])
}

model Bad {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("Following", fields: [followerId], references: [id])
  followerId  Int
  following   User     @relation("Followers", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  type      String   // 'FOLLOW', 'LIKE', etc.
  actorId   Int
  actor     User     @relation("NotificationActor", fields: [actorId], references: [id])
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([actorId])
}
